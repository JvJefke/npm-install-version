{"version":3,"sources":["../src/util.js"],"names":["fs","require","npm","path","sanitizeFilename","directoryExists","destination","lstatSync","e","error","Error","getPackageName","packageName","Promise","resolve","reject","load","loaded","err","result","cache","fetchPackageMeta","process","cwd","name","getUsage","readme","join","__dirname","readmeText","String","readFileSync","exec","sanitize","npmPackage","replacement","tryCatchOptimizer","fn","errorFn","finalFn","safeCallFunction","params","module","exports"],"mappings":";;AAAA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,MAAMD,QAAQ,KAAR,CAAZ;AACA,IAAME,OAAOF,QAAQ,MAAR,CAAb;AACA,IAAMG,mBAAmBH,QAAQ,mBAAR,CAAzB;;AAEA,SAASI,eAAT,CAA0BC,WAA1B,EAAuC;AACrC,MAAI;AACFN,OAAGO,SAAH,CAAaD,WAAb;AACA,WAAO,IAAP;AACD,GAHD,CAGE,OAAOE,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF;;AAED,SAASC,KAAT,GAAkB;AAChB,QAAMC,MAAM,0DAAN,CAAN;AACD;;AAED,SAASC,cAAT,CAAwBC,WAAxB,EAAqC;AACnC,SAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC3Cb,QAAIc,IAAJ,CAAS,EAAEC,QAAQ,KAAV,EAAT,EAA4B,UAASC,GAAT,EAAcC,MAAd,EAAsB;AAC9C,UAAGD,GAAH,EAAQ;AACN,eAAOH,OAAOG,GAAP,CAAP;AACD;;AAED,aAAOjB,QAAQmB,KAAR,CAAcnB,QAAQa,OAAR,CAAgB,mCAAhB,CAAd,CAAP;AACA,UAAIO,mBAAmBpB,QAAQ,mCAAR,CAAvB;;AAEAoB,uBAAiBT,WAAjB,EAA8BU,QAAQC,GAAR,EAA9B,EAA6C,UAASL,GAAT,EAAcC,MAAd,EAAsB;AACjE,YAAGD,GAAH,EAAQ;AACN,iBAAOH,OAAOG,GAAP,CAAP;AACD;;AAED,eAAOJ,QAAQK,OAAOK,IAAf,CAAP;AACD,OAND;AAOH,KAfD;AAgBD,GAjBM,CAAP;AAkBD;;AAED,SAASC,QAAT,GAAqB;AACnB,MAAIC,SAASvB,KAAKwB,IAAL,CAAUC,SAAV,EAAqB,IAArB,EAA2B,WAA3B,CAAb;AACA,MAAIC,aAAaC,OAAO9B,GAAG+B,YAAH,CAAgBL,MAAhB,CAAP,CAAjB;AACA,SAAO,2BAA0BM,IAA1B,CAA+BH,UAA/B,EAA2C,CAA3C;AAAP;AACD;;AAED,SAASI,QAAT,CAAmBC,UAAnB,EAA+B;AAC7B,SAAO9B,iBAAiB8B,UAAjB,EAA6B,EAAEC,aAAa,GAAf,EAA7B,CAAP;AACD;;AAED,SAASC,iBAAT,CAA4BC,EAA5B,EAAgCC,OAAhC,EAAyCC,OAAzC,EAAkD;AAChD,MAAIC,mBAAmB,SAAnBA,gBAAmB,CAACH,EAAD,EAAmB;AAAA,sCAAXI,MAAW;AAAXA,YAAW;AAAA;;AACxC,QAAG,OAAOJ,EAAP,KAAc,UAAjB,EAA6B;AAC3BA,0BAAMI,MAAN;AACD;AACF,GAJD;;AAMA,MAAI;AACFD,qBAAiBH,EAAjB;AACD,GAFD,CAEE,OAAM5B,KAAN,EAAa;AACb+B,qBAAiBF,OAAjB;AACD,GAJD,SAIU;AACRE,qBAAiBD,OAAjB;AACD;AACF;;AAEDG,OAAOC,OAAP,GAAiB;AACftC,kCADe;AAEfI,cAFe;AAGfE,gCAHe;AAIfc,oBAJe;AAKfQ,oBALe;AAMfG;AANe,CAAjB","file":"util.js","sourcesContent":["const fs = require('fs');\nconst npm = require('npm');\nconst path = require('path');\nconst sanitizeFilename = require('sanitize-filename');\n\nfunction directoryExists (destination) {\n  try {\n    fs.lstatSync(destination);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction error () {\n  throw Error('You must specify an install target like this: csjs@1.0.0');\n}\n\nfunction getPackageName(packageName) {\n  return new Promise(function(resolve, reject) {\n    npm.load({ loaded: false }, function(err, result) {\n        if(err) {\n          return reject(err);\n        }\n\n        delete require.cache[require.resolve('npm/lib/fetch-package-metadata.js')];\n        var fetchPackageMeta = require('npm/lib/fetch-package-metadata.js');\n\n        fetchPackageMeta(packageName, process.cwd(), function(err, result) {\n          if(err) {\n            return reject(err);\n          }\n\n          return resolve(result.name);\n        });\n    });\n  });\n}\n\nfunction getUsage () {\n  var readme = path.join(__dirname, '..', 'README.md');\n  var readmeText = String(fs.readFileSync(readme));\n  return /```usage\\n([\\s\\S]*?)```/.exec(readmeText)[1];\n}\n\nfunction sanitize (npmPackage) {\n  return sanitizeFilename(npmPackage, { replacement: '-' });\n}\n\nfunction tryCatchOptimizer (fn, errorFn, finalFn) {\n  var safeCallFunction = (fn, ...params) => {\n    if(typeof fn === \"function\") {\n      fn(...params);\n    }\n  }\n\n  try {\n    safeCallFunction(fn);\n  } catch(error) {\n    safeCallFunction(errorFn);\n  } finally {\n    safeCallFunction(finalFn);\n  }\n}\n\nmodule.exports = {\n  directoryExists,\n  error,\n  getPackageName,\n  getUsage,\n  sanitize,\n  tryCatchOptimizer\n};\n"]}