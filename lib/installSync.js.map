{"version":3,"sources":["../src/installSync.js"],"names":["childProcess","require","path","shelljs","util","CWD","process","cwd","TEMP","join","Math","random","installSync","npmPackage","options","destination","sanitize","overwrite","quiet","log","error","destinationPath","directoryExists","errored","tryCatchOptimizer","rm","mkdir","npmrcFile","test","cp","installOptions","stdio","command","platform","spawnSync","packageName","getPackageName","ls","forEach","dep","from","toString","to","mv","onError","console","err","final","module","exports"],"mappings":"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","file":"installSync.js","sourcesContent":["const childProcess = require('child_process');\nconst path = require('path');\nconst shelljs = require('shelljs');\n\nconst util = require('./util.js');\n\nconst CWD = process.cwd();\nconst TEMP = path.join(CWD, 'niv_modules', '.npm-install-version-temp' + Math.random());\n\nfunction installSync (npmPackage, options = {}) {\n  const {\n    destination = util.sanitize(npmPackage),\n    overwrite = false,\n    quiet = false\n  } = options;\n\n  const log = quiet ? () => {} : (...args) => console.log(...args);\n\n  if (!npmPackage) util.error();\n  const destinationPath = path.join(CWD, 'niv_modules', destination);\n  if (!overwrite && util.directoryExists(destinationPath)) {\n    return log(`Directory at ${destinationPath} already exists, skipping`);\n  }\n\n  let errored = false;\n\n  util.tryCatchOptimizer(function() {\n     // make temp install dir\n     shelljs.rm('-rf', TEMP);\n     shelljs.mkdir('-p', path.join(TEMP, 'node_modules'));\n\n     // copy local .npmrc file if exists\n     const npmrcFile = path.join(CWD, '.npmrc');\n     if (shelljs.test('-f', npmrcFile)) {\n       shelljs.cp(npmrcFile, TEMP);\n     }\n\n     // install package to temp dir\n     const installOptions = {\n       cwd: TEMP,\n       stdio: [null, null, null]\n     };\n     const command = process.platform === 'win32' ? 'npm.cmd' : 'npm';\n     childProcess.spawnSync(command, ['install', npmPackage], installOptions);\n\n     // get real package name\n     const packageName = util.getPackageName(npmPackage);\n\n     // move deps inside package\n     shelljs.mkdir('-p', path.join(TEMP, 'node_modules', packageName, 'node_modules'));\n     shelljs.ls(path.join(TEMP, 'node_modules'))\n       .forEach(dep => {\n         if (dep === packageName) return;\n         const from = path.join(TEMP, 'node_modules', dep).toString();\n         const to = path.join(TEMP, 'node_modules', packageName, 'node_modules', dep).toString();\n         shelljs.mv(from, to);\n       });\n\n     // copy to niv_modules/\n     shelljs.rm('-rf', destinationPath);\n     shelljs.mv(path.join(TEMP, 'node_modules', packageName), destinationPath);\n\n     log(`Installed ${npmPackage} to ${destinationPath}`);\n  }, function onError(error) {\n    errored = true;\n    console.error(`Error installing ${npmPackage}`);\n    console.error(err.toString());\n  }, function final() {\n    // clean up temp install dir\n    shelljs.rm('-rf', TEMP);\n\n    if (errored) {\n      throw `Error installing ${npmPackage}`;\n    }\n  });\n}\n\nmodule.exports = installSync;\n"]}